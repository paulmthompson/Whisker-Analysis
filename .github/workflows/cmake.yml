name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - {"os": ubuntu-latest, short: linux, compiler: gcc, shell: bash}
          - {"os": ubuntu-latest, short: linux, compiler: clang, shell: bash}
          #- {"os": windows-latest, short: windows, compiler: gcc, shell: msys2}
          - {"os": windows-latest, short: windows, compiler: clang, shell: msys2}
          - {"os": windows-latest, short: windows, compiler: msvc, shell: powershell}
          - {"os": macos-13, short: mac-amd64, compiler: clang, shell: bash}
          - {"os": macos-latest, short: mac-arm64, compiler: clang, shell: bash}

    runs-on: ${{matrix.os}}

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    defaults:
      run:
        shell: '${{ matrix.shell }} {0}'

    steps:
      - uses: actions/checkout@v4

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        if: runner.os == 'macOS'
        with:
          vcpkgGitCommitId: 'f7423ee180c4b7f40d43402c2feb3859161ef625'

      - name: Set up Homebrew
        id: set-up-homebrew
        if: runner.os == 'macOS'
        uses: Homebrew/actions/setup-homebrew@master

      - uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: Install python dependencies Windows
        run: python -m pip install --upgrade pip pytest numpy
        shell: powershell
        if: runner.os == 'Windows'

      - name: Install python dependencies Unix
        run: python -m pip install --upgrade pip pytest numpy
        if: runner.os == 'Linux' || runner.os == 'macOS'

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows' && matrix.compiler == 'msvc'

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Add clang and and gcc to windows runner
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows' && matrix.shell == 'msys2'
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-clang-x86_64-openmp
            mingw-w64-x86_64-openmp

      - name: "Install Linux System Dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-14-dev lcov

      - name: "Install Mac System Dependencies"
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          echo "OpenMP_ROOT=$(brew --prefix libomp)" >> $GITHUB_ENV

      - name: "Set environmental variables"
        if: runner.os == 'Linux' || runner.os == 'Windows'
        shell: bash
        run: |
          echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

      - name: Configure CMake
        shell: bash
        run: |
          if [[ "${{ matrix.compiler }}" == "clang" && "${{ runner.os }}" == "Linux" ]]; then
            cmake --preset ${{matrix.short}}-${{matrix.compiler}}-release -DPython3_ROOT_DIR="${{ env.pythonLocation }}" -DCODE_COVERAGE=ON
          else
            cmake --preset ${{matrix.short}}-${{matrix.compiler}}-release -DPython3_ROOT_DIR="${{ env.pythonLocation }}"
          fi
      - name: Build
        run: cmake --build --preset ${{matrix.short}}-${{matrix.compiler}}-release -DPython3_ROOT_DIR="${{ env.pythonLocation }}"

      - name: Test
        run: ctest --verbose --preset ${{matrix.short}}-${{matrix.compiler}}-release -C ${{matrix.short}}-${{matrix.compiler}}-release -DPython3_ROOT_DIR="${{ env.pythonLocation }}"
        working-directory: ${{ github.workspace }}

      - name: Capture coverage info
        if: matrix.compiler == 'clang' && runner.os == 'Linux'
        run: |
          lcov --directory build --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage to Coveralls
        if: matrix.compiler == 'clang' && runner.os == 'Linux'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.COVERALLS_REPO_TOKEN }}
          path-to-lcov: coverage.info
          parallel: true
